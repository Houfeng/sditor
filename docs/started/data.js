window.DOC_DATA={"locales":[{"name":"zh","text":"中文","title":"Formor 文档","groups":[{"name":"guide","text":"使用文档","docs":[{"group":"guide","name":"use","title":"如何使用","index":0,"source":"<h1 id=\"formor\">Formor</h1>\n<p><img src=\"https://img.alicdn.com/tfs/TB1YKZNomzqK1RjSZFpXXakSXXa-2014-946.png\" alt=\"img\"></p>\n<h2 id=\"%E7%AE%80%E4%BB%8B\">简介</h2>\n<p>Formor 是一个基于 <code>JSON Schema</code> 的配置表单生成器，目前只发布到了厂内。\nFormor 具备一个可灵活扩展的结构，可方便的扩展并集成到项目中。</p>\n<p>JSON Schema 规范：<a href=\"http://json-schema.org/\">点击查看 JSON Schema 规范</a></p>\n<h2 id=\"%E5%AE%89%E8%A3%85\">安装</h2>\n<pre><code class=\"language-bash\">tnpm i @ali/formor @ali/aps mota --save\n</code></pre>\n<h2 id=\"%E4%BD%BF%E7%94%A8\">使用</h2>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Form <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ali/formor'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@ali/formor/build/css/index.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Form \n    <span class=\"token comment\">//描述数据的 Schema</span>\n    schema<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>schema<span class=\"token punctuation\">}</span>  \n    <span class=\"token comment\">//数据（根需是为一个对象）</span>\n    value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span>  \n    <span class=\"token comment\">//数据发了改变</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">}</span>  \n    <span class=\"token comment\">//验证被触发</span>\n    onValidate<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<p>属性说明</p>\n<ul>\n<li>schema: 表单的 <code>JSON Schema</code> 描述</li>\n<li>value: 传递给表单的数据</li>\n<li>onChange: 在数据发生变化时的事件</li>\n<li>onValidate: 在验证被触发发时的事件，（参数格式 Array&lt;{state:bool,message:string}&gt;）</li>\n</ul>\n","filename":"./markdowns/use.md","root":"/Users/Houfeng/my/dev/sditor","result":"<h1 id=\"formor\">Formor</h1>\n<p><img src=\"https://img.alicdn.com/tfs/TB1YKZNomzqK1RjSZFpXXakSXXa-2014-946.png\" alt=\"img\"></p>\n<h2 id=\"%E7%AE%80%E4%BB%8B\">简介</h2>\n<p>Formor 是一个基于 <code>JSON Schema</code> 的配置表单生成器，目前只发布到了厂内。\nFormor 具备一个可灵活扩展的结构，可方便的扩展并集成到项目中。</p>\n<p>JSON Schema 规范：<a href=\"http://json-schema.org/\">点击查看 JSON Schema 规范</a></p>\n<h2 id=\"%E5%AE%89%E8%A3%85\">安装</h2>\n<pre><code class=\"language-bash\">tnpm i @ali/formor @ali/aps mota --save\n</code></pre>\n<h2 id=\"%E4%BD%BF%E7%94%A8\">使用</h2>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Form <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ali/formor'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@ali/formor/build/css/index.css'</span><span class=\"token punctuation\">;</span>\n<p><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></p>\n<p><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Form\n<span class=\"token comment\">//描述数据的 Schema</span>\nschema<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>schema<span class=\"token punctuation\">}</span><br>\n<span class=\"token comment\">//数据（根需是为一个对象）</span>\nvalue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><br>\n<span class=\"token comment\">//数据发了改变</span>\nonChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">}</span><br>\n<span class=\"token comment\">//验证被触发</span>\nonValidate<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></p>\n<p><span class=\"token punctuation\">}</span>\n</code></pre></p>\n<p>属性说明</p>\n<ul>\n<li>schema: 表单的 <code>JSON Schema</code> 描述</li>\n<li>value: 传递给表单的数据</li>\n<li>onChange: 在数据发生变化时的事件</li>\n<li>onValidate: 在验证被触发发时的事件，（参数格式 Array&lt;{state:bool,message:string}&gt;）</li>\n</ul>\n"},{"group":"guide","name":"dev","title":"开发扩展","index":1,"source":"# 开发扩展\n\nFormor 具备一个可灵活扩展的结构，本文将介绍一下如何扩展 Formor。\n扩展是为了扩展 Formor 的部件类型，以提供更多的能力，让使用 Formor 的系统能更深度的集成，\n比如，在项目可扩展「文件上传」部件。\n\nAPI 说明A: [点击查看详细 API 说明](../api)\n\n## 开发自定义 Renderder\n\n在这里通过简单 `StringRenderer` 来做一个说明，\n每个 `Renderer` 都分成了 `View` 和 `Model` 两部分。\n\n`View` 的实现代码及说明：\n\n```js\nimport * as React from \"react\";\nimport { model } from \"mota\";\nimport { Renderer } from \"@ali/formor\";\nimport { StringViewModel } from \"./ViewModel\";\nimport \"./index.less\";\n\nconst { Input } = require(\"@ali/aps\");\nconst { isNull } = require(\"ntils\");\n\n@model(StringViewModel)\nexport class StringRenderer extends Renderer {\n\n  //声明处理的数据类型 （和 widget 任选其一指定或同时指定）\n  //自定义 renderer 一般同时指定\n  static type = \"string\";\n\n  //声明 widget 名称（和 type 任选其一指定或同时指定）\n  //自定义 renderer 一般同时指定\n  static widget = 'custom'\n\n  //编辑数据「正规化」处理函数\n  //value  : 当前值\n  //schema : 当前 shcema 描述\n  //field  : 当前字段\n  static normalize(value, schema, field) {\n    return String(value || \"\");\n  }\n\n  //声明是否支持「缩略」模式\n  protected thumbable = false;\n\n  //组件的顶层 HTML 容器的 `class` 方便写样式\n  protected className = \"string\";\n\n  protected onChange = event => {\n    this.model.value = event.target.value;\n    //在改变了模型数据后，需触发 `change`，参数可指定「节流时间（单位 ms）」\n    this.triggerChange(300);\n    //因为自定义 widget 常用处理一个完整的自定义对象，\n    //如果进行自定义验证，可将验证结果反馈出来\n    this.setValidateResult({state:false, message:'错误消息'});\n  };\n\n  //组件渲染函数\n  protected renderEditor() {\n    //除了 value ，从 model 上还能获取 `schema`、`field`\n    const { value } = this.model;\n    return (\n      <Input\n        size=\"small\"\n        value={isNull(value) ? \"\" : value}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\n```\n\n`Model` 的实现及说明:\n\n```js\nimport { RendererViewModel } from \"@ali/formor\";\n\n//ViewModel 通常不用有太多处理\n//如果有需要可在 model 中增加处理方法和成员\nexport class StringViewModel extends RendererViewModel {\n}\n```\n\n## 注册自定义 Renderder\n\n```js\nimport { Form } from \"@ali/formor\";\n\n//通过 `Form.register` 进行自定义 `renderer` 的注册\nForm.register(YourRenderer);\n```\n\n`renderer` 在注册后就可使用了，通过 `JSON Schema` 的扩展字段 `widget` \n声明某个数据项使用自定义的 `widget` 进行渲染和编辑。\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"test\": {\n      \"title\": \"测试\",\n      \"type\": \"string\",\n      \"widget\": \"your_widget\"\n    }\n  }\n}\n```","filename":"./markdowns/dev.md","root":"/Users/Houfeng/my/dev/sditor","result":"<h1 id=\"%E5%BC%80%E5%8F%91%E6%89%A9%E5%B1%95\">开发扩展</h1>\n<p>Formor 具备一个可灵活扩展的结构，本文将介绍一下如何扩展 Formor。\n扩展是为了扩展 Formor 的部件类型，以提供更多的能力，让使用 Formor 的系统能更深度的集成，\n比如，在项目可扩展「文件上传」部件。</p>\n<p>API 说明A: <a href=\"../api\">点击查看详细 API 说明</a></p>\n<h2 id=\"%E5%BC%80%E5%8F%91%E8%87%AA%E5%AE%9A%E4%B9%89-renderder\">开发自定义 Renderder</h2>\n<p>在这里通过简单 <code>StringRenderer</code> 来做一个说明，\n每个 <code>Renderer</code> 都分成了 <code>View</code> 和 <code>Model</code> 两部分。</p>\n<p><code>View</code> 的实现代码及说明：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> model <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mota\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Renderer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ali/formor\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StringViewModel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ViewModel\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./index.less\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Input <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@ali/aps\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isNull <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ntils\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">model</span><span class=\"token punctuation\">(</span>StringViewModel<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringRenderer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Renderer</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//声明处理的数据类型 （和 widget 任选其一指定或同时指定）</span>\n  <span class=\"token comment\">//自定义 renderer 一般同时指定</span>\n  <span class=\"token keyword\">static</span> type <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//声明 widget 名称（和 type 任选其一指定或同时指定）</span>\n  <span class=\"token comment\">//自定义 renderer 一般同时指定</span>\n  <span class=\"token keyword\">static</span> widget <span class=\"token operator\">=</span> <span class=\"token string\">'custom'</span>\n\n  <span class=\"token comment\">//编辑数据「正规化」处理函数</span>\n  <span class=\"token comment\">//value  : 当前值</span>\n  <span class=\"token comment\">//schema : 当前 shcema 描述</span>\n  <span class=\"token comment\">//field  : 当前字段</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">,</span> field</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//声明是否支持「缩略」模式</span>\n  <span class=\"token keyword\">protected</span> thumbable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//组件的顶层 HTML 容器的 `class` 方便写样式</span>\n  <span class=\"token keyword\">protected</span> className <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">protected</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//在改变了模型数据后，需触发 `change`，参数可指定「节流时间（单位 ms）」</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">triggerChange</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//因为自定义 widget 常用处理一个完整的自定义对象，</span>\n    <span class=\"token comment\">//如果进行自定义验证，可将验证结果反馈出来</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setValidateResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">:</span><span class=\"token string\">'错误消息'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//组件渲染函数</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token function\">renderEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//除了 value ，从 model 上还能获取 `schema`、`field`</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Input\n        size<span class=\"token operator\">=</span><span class=\"token string\">\"small\"</span>\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onChange<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p><code>Model</code> 的实现及说明:</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RendererViewModel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ali/formor\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//ViewModel 通常不用有太多处理</span>\n<span class=\"token comment\">//如果有需要可在 model 中增加处理方法和成员</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringViewModel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RendererViewModel</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"%E6%B3%A8%E5%86%8C%E8%87%AA%E5%AE%9A%E4%B9%89-renderder\">注册自定义 Renderder</h2>\n<pre><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Form <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@ali/formor\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//通过 `Form.register` 进行自定义 `renderer` 的注册</span>\nForm<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>YourRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>renderer</code> 在注册后就可使用了，通过 <code>JSON Schema</code> 的扩展字段 <code>widget</code>\n声明某个数据项使用自定义的 <code>widget</code> 进行渲染和编辑。</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"widget\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your_widget\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"}]}]}],"plugins":[{"name":"doczilla-place","options":{}},{"name":"doczilla-include","options":{}},{"name":"doczilla-container","options":{}},{"name":"doczilla-highlight","options":{}},{"name":"doczilla-details","options":{}},{"name":"doczilla-card","options":{}},{"name":"doczilla-anchor","options":{}},{"name":"doczilla-toc","options":{}}],"mode":"static","baseUri":"","extname":".html"};